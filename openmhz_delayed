#!/bin/bash

# Configuration file path
CONFIG_FILE="/home/ubuntu/Automations/OpenMhz/openmhz_delayed_config.json"

# Logging function
log_message() {
  local level="$1"
  local system_name="$2"
  local file="$3"
  local message="$4"
  printf "%-28s %-11s %-20s %-20s %-35s\n" "$(date +'%Y-%m-%d %H:%M:%S.%3N')" "$level" "$system_name" "$message" "$file"
}

# Check if a talkgroup should be skipped
should_skip_talkgroup() {
  local talkgroup="$1"
  local talkgroups_to_skip="$2"
  IFS=',' read -ra SKIP_ARRAY <<< "$talkgroups_to_skip"
  for tg in "${SKIP_ARRAY[@]}"; do
    if [[ "$talkgroup" == "$tg" ]]; then
      return 0 # Skip upload
    fi
  done
  return 1 # Proceed with upload
}

# Processing function
process_file() {
  local m4a_file="$1"
  local system_config="$2"
  local base_name="${m4a_file%.m4a}"
  local call_json="${base_name}.json"
  local call_wav="${base_name}.wav"
  local file_name=$(basename "$m4a_file")
  local system_name=$(jq -r '.systemName' <<< "$system_config")
  local short_name=$(jq -r '.shortName // ""' <<< "$system_config")
  local openmhz_key=$(jq -r '.openmhzKey' <<< "$system_config")
  local upload_delay=$(jq -r '.uploadDelay' <<< "$system_config")
  local min_file_age=$(jq -r '.minFileAge // 10' <<< "$system_config")
  local talkgroups_to_skip=$(jq -r '.talkgroupsToSkip' <<< "$system_config")
  local global_watch_dir=$(jq -r '.globalWatchDir' "$CONFIG_FILE")
  local watch_dir=$(jq -r '.watchDir // ""' <<< "$system_config")
  
  if [[ -z "$watch_dir" || "$watch_dir" == "null" ]]; then
    watch_dir="${global_watch_dir}/${system_name}"
  fi

  local uploaded_dir="${watch_dir}_uploaded"

  local talkgroup=$(jq -r '.talkgroup' "$call_json")
  
  if should_skip_talkgroup "$talkgroup" "$talkgroups_to_skip"; then
    log_message "(info)" "$system_name" "$file_name" "**SKIPPED**"
  else
    local upload_short_name="${short_name:-$system_name}"
    local OPENMHZ_URL="https://api.openmhz.com/$upload_short_name/upload"
    log_message "(info)" "$system_name" "$file_name" "Uploading"
    
    response=$(curl -sS -m 15 --write-out "%{http_code}" --output /tmp/api_response.log --request POST \
      --url "$OPENMHZ_URL" \
      --header 'Content-Type: multipart/form-data' \
      --header 'User-Agent: TrunkRecorder1.0' \
      --form api_key="$openmhz_key" \
      --form call=@"$m4a_file" \
      --form start_time="$(jq -r '.start_time' "$call_json")" \
      --form stop_time="$(jq -r '.stop_time' "$call_json")" \
      --form call_length="$(jq -r '.call_length' "$call_json")" \
      --form freq="$(jq -r '.freq' "$call_json")" \
      --form talkgroup_num="$talkgroup" \
      --form emergency=0 \
      --form "source_list=$(jq -c '.srcList' "$call_json")" \
      --form "freq_list=$(jq -c '.freqList' "$call_json")" \
      --form "patched_talkgroups=$(jq -c '.patched_talkgroups' "$call_json")"
    )

    if [[ "$response" -eq 200 ]]; then
      log_message "(info)" "$system_name" "$file_name" "Success"
    else
      log_message "(error)" "$system_name" "$file_name" "Upload failed with response code: $response"
      return
    fi
  fi

  local relative_path="${m4a_file#$watch_dir}"
  local destination_path="${uploaded_dir}${relative_path}"
  local destination_dir=$(dirname "$destination_path")

  mkdir -p "$destination_dir"
  mv -f "$m4a_file" "$destination_path"
  mv -f "$call_json" "${destination_path%.m4a}.json"
  rm -f "$call_wav"
}

# Main loop
while true; do
  systems=$(jq -c '.systems[]' "$CONFIG_FILE")
  
  for system_config in $systems; do
    system_name=$(jq -r '.systemName' <<< "$system_config")
    global_watch_dir=$(jq -r '.globalWatchDir' "$CONFIG_FILE")
    watch_dir=$(jq -r '.watchDir // ""' <<< "$system_config")
    upload_delay=$(jq -r '.uploadDelay' <<< "$system_config")
    min_file_age=$(jq -r '.minFileAge // 4' <<< "$system_config")
    
    if [[ -z "$watch_dir" || "$watch_dir" == "null" ]]; then
      watch_dir="${global_watch_dir}/${system_name}"
    fi

    find "$watch_dir" -type f -name "*.m4a" | sort -t'-' -k2,2n | while read -r m4a_file; do
      start_time=$(basename "$m4a_file" | cut -d'-' -f2 | cut -d'_' -f1)
      file_mod_time=$(stat -c %Y "$m4a_file")
      current_time=$(date +%s)

      if [ $((current_time - file_mod_time)) -ge "$min_file_age" ] && [ $((current_time - start_time)) -gt "$upload_delay" ]; then
        process_file "$m4a_file" "$system_config"
        sleep 1
      fi
    done
  done
  sleep 1
done
