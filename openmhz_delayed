#!/bin/bash

# TrunkRecorder config requirements:
#   audioArchive: true,
#   compressWav: true,
#   callLog: true

# Configuration
SHORT_NAME="" # openMhz short name
OPENMHZ_KEY="" # openMhz API Key
WATCH_DIR="" # script only works for one system at a time. Choose the directory for just that system.
UPLOADED_DIR="${WATCH_DIR}_uploaded" # Directory for uploaded files
AGE_THRESHOLD=300 # Time delay (in seconds) before files are uploaded

# Ensure the uploaded directory exists
mkdir -p "$UPLOADED_DIR"

# Logging
log_message() {
  local level="$1"  # Log level: INFO, ERROR, etc.
  local file="$2"   # File name or context
  local message="$3"  # Message to log
  printf "%-28s %-11s %-20s %-35s\n" "$(date +'%Y-%m-%d %H:%M:%S.%3N')" "$level" "$message" "$file"
}

# Processing
process_file() {
  m4a_file="$1"
  base_name="${m4a_file%.m4a}"
  call="$base_name.m4a"
  call_json="${base_name}.json"
  call_wav="${base_name}.wav"
  file_name=$(basename "$m4a_file")
  log_message "(info)" "$file_name" "Ready for Upload"

  # Upload to OpenMHZ
  OPENMHZ_URL="https://api.openmhz.com/$SHORT_NAME/upload"
  log_message "(info)" "$file_name" "Uploading"

  # Extract metadata from JSON
  start_time=$(jq -r '.start_time' "$call_json")
  stop_time=$(jq -r '.stop_time' "$call_json")
  call_length_int=$(jq -r '.call_length' "$call_json")
  freq=$(jq -r '.freq' "$call_json")
  talkgroup=$(jq -r '.talkgroup' "$call_json")
  patched_talkgroups=$(jq -c '.patched_talkgroups' "$call_json")

  # Make the upload request with error handling
  response=$(curl -sS -m 10 --write-out "%{http_code}" --output /tmp/api_response.log --request POST \
    --url "$OPENMHZ_URL" \
    --header 'Content-Type: multipart/form-data' \
    --header 'User-Agent: TrunkRecorder1.0' \
    --form api_key="$OPENMHZ_KEY" \
    --form call=@"$call" \
    --form start_time="$start_time" \
    --form stop_time="$stop_time" \
    --form call_length="$call_length_int" \
    --form freq="$freq" \
    --form talkgroup_num="$talkgroup" \
    --form emergency=0 \
    --form "source_list=$(jq -c '.srcList' "$call_json")" \
    --form "freq_list=$(jq -c '.freqList' "$call_json")" \
    --form "patched_talkgroups=$patched_talkgroups"
  )

  # Check the response code
  if [[ "$response" -eq 200 ]]; then
    log_message "(info)" "$file_name" "Upload Success"

    # Create year, month, and day directories
    year_dir="$UPLOADED_DIR/$(date +%Y)"
    month_dir="$year_dir/$(date +%-m)"
    day_dir="$month_dir/$(date +%-d)"

    mkdir -p "$day_dir"

    # Move files to the uploaded directory after successful upload
    mv -f "$m4a_file" "$day_dir/"
    log_message "(info)" "$file_name" "Audio Moved"

    mv -f "$call_json" "$day_dir/"
    log_message "(info)" "$file_name" "JSON Moved"

    rm -f "$call_wav"
    log_message "(info)" "$file_name" "WAV Deleted"
  else
    log_message "(error)" "$file_name" "Upload failed with response code: $response"
    log_message "(error)" "$file_name" "Response: $(cat /tmp/api_response.log)"
  fi
}

# Main loop
while true; do
  # Find and sort files by start time extracted from file name
  find "$WATCH_DIR" -type f -name "*.m4a" | sort -t'-' -k2,2n | while read -r m4a_file; do
    # Extract start time from file name
    start_time=$(basename "$m4a_file" | cut -d'-' -f2 | cut -d'_' -f1)

    # Check if the file's start time meets the age threshold
    if [ $(( $(date +%s) - start_time )) -gt "$AGE_THRESHOLD" ]; then
      # Upload the file if it passes the threshold
      process_file "$m4a_file"
      
      # Wait before uploading the next file.
      sleep 1
    fi
  done

  # Once all eligible files are uploaded, wait 5 seconds before checking for new files.
  sleep 5
done
